@page "/"
@page "/{Id:int}"

@using System.Xml
@using System.Net.Http
@using System.Net.Http.Headers
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>

@if (_XmlNodeList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (XmlNode node in _XmlNodeList)
        {
            <div class="col">
                <h5><a href="@node.SelectSingleNode("link").InnerText"><strong>@node.SelectSingleNode("title").InnerText</strong></a></h5>
                @if(node.SelectSingleNode("image") != null && !string.IsNullOrEmpty(node.SelectSingleNode("image").InnerText))
                {
                    <img src="@node.SelectSingleNode("image").InnerText" class="rss-img" onerror="this.onerror=null; this.src='/assets/imgs/card-image.svg'" alt="...">
                }
                @StringToHtml(node.SelectSingleNode("description").InnerText)
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private RssFeedModel[]? RssFeeds { get; set; }
    private RssFeedModel? RssFeed { get; set; }
    private MemoryStream? _MemoryStream { get; set; }
    private XmlDocument? _XmlDocument = new XmlDocument();
    private XmlNodeList? _XmlNodeList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        RssFeeds = await Http.GetFromJsonAsync<RssFeedModel[]>("data/rss-feeds.json");
        RssFeed = RssFeeds.Where(rf => rf.Id == (Id == 0 ? 0 : Id)).FirstOrDefault();

        _MemoryStream = await Http.GetStreamAsync($"https://api.codetabs.com/v1/proxy/?quest={RssFeed.Url}");
        if (_MemoryStream != null)
        {
            _XmlDocument.Load(_MemoryStream);
            _XmlNodeList = _XmlDocument.SelectNodes("//channel/item");
        }
    }

    RenderFragment StringToHtml(string htmlString)
    {
        return new RenderFragment(rf => rf.AddMarkupContent(0, htmlString));
    }

    public class RssFeedModel
    {
        public int Id { get; set; }

        public string? Url { get; set; }
    }
}
