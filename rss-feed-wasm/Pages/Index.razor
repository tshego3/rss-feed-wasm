@page "/"
@page "/{Id:int}"

@using System.Xml
@using System.Net.Http
@using System.Net.Http.Headers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>

@if (_XmlNodeList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        @foreach (XmlNode node in _XmlNodeList)
        {
            <div class="col">
                <h5><a href="@node.SelectSingleNode("link").InnerText"><strong>@node.SelectSingleNode("title").InnerText</strong></a></h5>
                @if (Id != 1 && Id != 13 && Id != 14 && Id != 15 && Id != 16)
                {
                    @StringToHtml(GetImageUrl(node))
                }
                <br />
                @if ( Id != 7)
                {
                    @StringToHtml(node.SelectSingleNode("description").InnerText)
                }
                else
                {
                    @StringToHtml(GetDescription(node))
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private RssFeedModel[]? RssFeeds { get; set; }
    private RssFeedModel? RssFeed { get; set; }
    private XmlDocument? _XmlDocument = new XmlDocument();
    private XmlNodeList? _XmlNodeList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            RssFeeds = await Http.GetFromJsonAsync<RssFeedModel[]>("data/rss-feeds.json");
            RssFeed = RssFeeds.Where(rf => rf.Id == (Id == 0 ? 0 : Id)).FirstOrDefault();

            var _MemoryStream = await Http.GetStreamAsync($"https://api.codetabs.com/v1/proxy/?quest={RssFeed.Url}");
            if (_MemoryStream != null)
            {
                _XmlDocument.Load(_MemoryStream);
                _XmlNodeList = _XmlDocument.SelectNodes("//channel/item");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private RenderFragment StringToHtml(string htmlString)
    {
        return new RenderFragment(rf => rf.AddMarkupContent(0, htmlString));
    }

    private string GetDescription(XmlNode xmlNode)
    {
        string value = "No Description";
        try
        {
            string jsonData = JsonConvert.SerializeXmlNode(xmlNode);
            JObject jObect = JObject.Parse(jsonData);

            try
            {
                if (!string.IsNullOrEmpty(xmlNode.SelectSingleNode("description").InnerText))
                {
                    value = xmlNode.SelectSingleNode("description").InnerText;
                }
            }
            catch
            {

            }
            try
            {
                if (!string.IsNullOrEmpty(jObect["item"]["content:encoded"].ToString()))
                {
                    value = jObect["item"]["content:encoded"].ToString();
                }
            }
            catch
            {

            }
        }
        catch
        {

        }

        return value;
    }

    private string GetImageUrl(XmlNode xmlNode)
    {
        string value = "/assets/imgs/card-image.svg";
        try
        {
            string jsonData = JsonConvert.SerializeXmlNode(xmlNode);
            JObject jObect = JObject.Parse(jsonData);

            try
            {
                if (!string.IsNullOrEmpty(jObect["item"]["image"].ToString()))
                {
                    value = jObect["item"]["image"].ToString();
                }
            }
            catch
            {

            }
            try
            {
                if (!string.IsNullOrEmpty(jObect["item"]["image"]["url"].ToString()))
                {
                    value = jObect["item"]["image"]["url"].ToString();
                }
            }
            catch
            {

            }
            try
            {
                if (!string.IsNullOrEmpty(jObect["item"]["enclosure"]["@url"].ToString()))
                {
                    value = jObect["item"]["enclosure"]["@url"].ToString();
                }
            }
            catch
            {

            }
            try
            {
                if (!string.IsNullOrEmpty(jObect["item"]["media:thumbnail"]["@url"].ToString()))
                {
                    value = jObect["item"]["media:thumbnail"]["@url"].ToString();
                }
            }
            catch
            {

            }
        }
        catch
        {

        }

        string result = $"<img src=\"{value}\" class=\"mx-auto\" alt=\"...\" />";
        return result;
    }

    public class RssFeedModel
    {
        public int Id { get; set; }

        public string? Url { get; set; }
    }
}
